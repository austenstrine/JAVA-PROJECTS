-------RELEASE NOTES for WISP-T BETA 1.2-------

BETA 1.2, the Editor's update, is now ready. Any and all editor functionality has been integrated into the WISPT.java file and its GUI as much as logical and possible.

Big changes:

When editor mode is active now, all node, tip, and pic editing functionality is done at an editor bar at the bottom. You can define the title of pics now - tip titles still function similar as before where whatever is before the first colon will be the title. This will change in future releases, see TODO below. Node titles and contents are directly editable when editor mode is on, also, node titles now appear above their contents. For pics, after the initial load, you must still click on the specific pic icon to view the pic you selected AND edit the title. Work in progress, this will change in a similar way as the tips will be as shown in TODO below. Tips and pics are no longer linked, although they appear in the same JPanel. You can also add up to 12 pics and tips per node. (Although you may not be able to display all of the tips simultaneously. Neither should you, no need for information overload.)
Your changes are saved as soon as you navigate away from the node in question. No undo as of yet, aside from re-loading from the last save. No save button (not sure its necessary, actually.)
Nodes can now be cut and pasted, buttons have been added for this functionality. Regular ctrl+C and ctrl+V functionality will not affect this, for simplicity and also to avoid accidentally destroying huge swaths of your tree in the process of reorginizing it. Future releases will have additional safeguards to avoid accidental loss of data, see TODO.

Other stuff:
Cancel button in settings works now.

Paths of the .java and .class files has changed, so if you created any user profiles or trees with beta 1.1, you'll need to send them to me for conversion. This should be a one-time dealio - not anticipating any other path changes in the future.


TODO:
User profile functionality 
	I'm going to add a jspinner to the settings area that allows the administrator to have control over how many times a node may be accessed before it gets locked. Will also have a universal "Standard Settings" file that all standard user profiles are subject to onload that only administrators have power to change - this will be how administrators affect user profiles. It will be designed so that if the file does not exist, no standard users will be able to log in until an administrator logs in and creates one to avoid users kind of...hacking the darn thing. Default profiles will be scrapped - instead, WISP-T will only allow you to sign in, or create a profile. One of those must happen in order to open WISP-T. If I'm being that strict, I may have to include password recovery options as well...

Tip checkboxes
	I'm thinking of trying to nest the jcheckbox horizontally next to a jtextfield in a jFrame, and then put that jFrame where the checkboxes currently are. The checkboxes would have no text, any text functionality that existed previously will be handled through the jtextfields instead. When editor mode is on, those text boxes would be directly editable similar to the node title and content. I've already updated the WISPTNodeObject to include getters and setters for an array of 12 strings for tip titles, I only just now figured out an acceptably 'elegant' solution.

Node cut/paste
	I'm going to try to have it so that the paste button is disabled until the cut button has been pressed, and the cut button will be disabled after being pressed, until the paste button is pressed. Essentially, they will never both be available simultaneously. Might also have the paste button change color to red when it's filled with a node - certainly won't hurt. Also, will include an auto-save that ensures that when you close the program absent mindedly, it will attach that node as a child of the root and save the tree as "savenameBackup.tree". Thinking about allowing the cut/paste to span from one tree to another, so you can cut from one tree, load another, and paste in the new tree, potentially saving a lot of time that would otherwise be spent duplicating similar or identical steps. I think that's currently possible, although unintentionally so - haven't thought about possible consequences of that quite yet though. Might be better to have a copy button that works from one tree to another, but not cut. Also might be better for the cut function to block any attempt at exiting until something is done with that node in the nodeClipboard. Still thinking about what would be more elegant/appropriate.

Radio button navigation
	Currently there are only 4 radio buttons, which limits you to 4 child nodes per node that can be selected via this method. That needs to change to 12, and include visual space management - might have to have some kind of limiation on the number of characters that appear in the title(32? 48?), not sure. Will have to implement it similar to how I've re-done tips and pics, where the relevant items are located in an array instead of being individually named variables. Also need to include compatibility with the add node button so that it notifies the user when they cannot add more than 12 children per node instead of adding another child.

That's all! E-mail me at austenstrine@gmail.com if you have any questions.